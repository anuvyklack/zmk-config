#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/sofle.h"
#include "zmk-helpers/unicode-chars/russian.dtsi"

#define CONFIG_ZMK_COMBO_MAX_COMBOS_PER_KEY 15

#define ___ &trans
#define XXX &none

// OS
#define WINDOWS 0
#define LINUX 1
#define MAC_OS 2

#define HOST_OS LINUX // Needed for unicode international_chars

// Layers
#define QWERTY 0
#define SYM 1
#define NUM 2
#define FUNC 3

// #include "./util/symbols.dtsi"
// #include "./util/my-symbols.dtsi"

//-- Global settings -----------------------------------------------------------

#define QUICK_TAP_MS 175

// Common combos "timeout-ms" — number of milliseconds all keys must be pressed
// within to trigger the combo.
#define COMBO_TERM 75

//-- Combos --------------------------------------------------------------------
//                          KEY POSITIONS
// ╭─────────────────────────╮          ╭─────────────────────────╮
// │ LN5 LN4 LN3 LN2 LN1 LN0 │          │ RN0 RN1 RN2 RN3 RN4 RN5 │
// │ LT5 LT4 LT3 LT2 LT1 LT0 │          │ RT0 RT1 RT2 RT3 RT4 RT5 │
// │ LM5 LM4 LM3 LM2 LM1 LM0 │ LEC  REC │ RM0 RM1 RM2 RM3 RM4 RM5 │
// │ LB5 LB4 LB3 LB2 LB1 LB0 ╰───╮  ╭───╯ RB0 RB1 RB2 RB3 RB4 RB4 │
// ╰───────╮ LH4 LH3 LH2 LH1 LH0 │  │ RH0 RH1 RH2 RH3 RH4 ╭───────╯
//         ╰─────────────────────╯  ╰─────────────────────╯
#define KEYS_L LN0 LN1 LN2 LN3 LN4 LN5 LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5  // left hand
#define KEYS_R RN0 RN1 RN2 RN3 RN4 RN5 RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5  // right hand
#define THUMBS LH4 LH3 LH2 LH1 LH0 RH0 RH1 RH2 RH3 RH4  // thumbs

ZMK_COMBO(enter_combo, &kp ENTER, RM1 RM2, ALL)

ZMK_COMBO(capsword_combo, &caps_word, LH0 RH0, ALL)

// ZMK_COMBO(ctrl_shift_v_combo, &kp LC(LS(V)), LB1 LB2 LH1, QWERTY, 150)
// ZMK_COMBO(ctrl_shift_t_combo, &kp LC(LS(T)), LH1 LH0 LT0, QWERTY, 400)

ZMK_COMBO(ctrl_shift_tab_combo, &kp LC(LS(TAB)), LM3 LM2, QWERTY, 40)
ZMK_COMBO(ctrl_tab_combo,       &kp LC(TAB),     LM2 LM1, QWERTY, 40)

ZMK_COMBO(parens_combo,   &parens_pair,   LM2 LM1, SYM)
ZMK_COMBO(braces_combo,   &braces_pair,   LT2 LT1, SYM)
ZMK_COMBO(brackets_combo, &brackets_pair, LB2 LB1, SYM)

ZMK_MACRO(ctrl_shift_macro,
          bindings = <&macro_press &kp LCTRL &kp LSHFT>,
                     <&macro_pause_for_release>,
                     <&macro_release &kp LCTRL &kp LSHFT>;)
ZMK_COMBO(cltr_shift_combo, &ctrl_shift_macro, LH1 LH0, ALL)

//------------------------------------------------------------------------------
// Symbols
ZMK_MACRO(em_dash, bindings = <&macro_tap &kp RALT &kp MINUS &kp MINUS &kp MINUS>;)
ZMK_MACRO(nbsp, bindings = <&macro_tap &kp RALT &kp SPACE &kp SPACE>;)

//------------------------------------------------------------------------------
ZMK_MACRO(lang, bindings = <&macro_press &kp LGUI>,
                           <&macro_tap &kp SPACE>,
                           <&macro_release &kp LGUI>;)

// Tap ()/{}/[]/<> to print open-close brackets and place caret between
ZMK_MACRO(parens_pair,   bindings = <&kp LPAR &kp RPAR &kp LEFT>;)
ZMK_MACRO(braces_pair,   bindings = <&kp LBRC &kp RBRC &kp LEFT>;)
ZMK_MACRO(brackets_pair, bindings = <&kp LBKT &kp RBKT &kp LEFT>;)
ZMK_MACRO(angular_pair,  bindings = <&kp LT &kp GT &kp LEFT>;)

// ←/→ workspace
ZMK_MACRO(wsp_left,  bindings = <&kp LG(LA(LEFT))>;)
ZMK_MACRO(wsp_right, bindings = <&kp LG(LA(RIGHT))>;)

// ←/→ tab
ZMK_MACRO(next_tab, bindings = <&kp LC(TAB)>;)
ZMK_MACRO(prev_tab, bindings = <&kp LC(LS(TAB))>;)

// forward / backward (in file manager, history in browser, etc)
ZMK_MACRO(forward,  bindings = <&kp LA(RIGHT)>;)
ZMK_MACRO(backward, bindings = <&kp LA(LEFT)>;)

// Select word, with cursor somewhere in between
ZMK_MACRO(select_word,
          bindings = <&macro_press &kp LCTRL>,
                     <&macro_tap &kp LEFT>,
                     <&macro_press &kp LSHIFT>,
                     <&macro_tap &kp RIGHT>,
                     <&macro_release &kp LSHIFT &kp LCTRL>;)

// Delete word, with cursor somewhere in between
ZMK_MACRO(delete_word, bindings = <&select_word &kp BACKSPACE>;)

&sk {  // sticky-key config
    release-after-ms = <900>;  // release after 0.6s
    quick-release;             // no double capitalization when rolling keys
};

// tap: space | shift + tap: dot -> space -> sticky shift | hold: activate layer
ZMK_HOLD_TAP(mt_spc,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&kp>, <&spc_morph>;
)
ZMK_MACRO(dot_space,
          wait-ms = <5>;
          tap-ms = <5>;
          bindings = <&kp DOT &kp SPACE &sk LSHFT>;)
ZMK_MOD_MORPH(spc_morph,
              mods = <(MOD_LSFT|MOD_RSFT)>;
              bindings = <&kp SPACE>, <&dot_space>;)

// left-hand homerow modifiers
ZMK_HOLD_TAP(hml,
    flavor = "balanced";
    // Produces tap if held longer than tapping-term-ms
    tapping-term-ms = <280>;
    // A quick tap+hold holds tap key pressed.
    quick-tap-ms = <QUICK_TAP_MS>;
    // Consider activating hold behavior only if key was pressed in more
    // than this amound of time after previous.
    require-prior-idle-ms = <150>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    // Delay positional check until key-release
    hold-trigger-on-release;
)

// right-hand homerow modifiers
ZMK_HOLD_TAP(hmr,
    flavor = "balanced";
    // Produces tap if held longer than tapping-term-ms
    tapping-term-ms = <280>;
    // A quick tap+hold holds tap key pressed.
    quick-tap-ms = <QUICK_TAP_MS>;
    // Consider activating hold behavior only if key was pressed in more
    // than this amound of time after previous.
    require-prior-idle-ms = <150>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
    // Delay positional check until key-release
    hold-trigger-on-release;
)

// Left homerow modifiers for navigation layer
ZMK_HOLD_TAP(lnav,
    flavor = "balanced";
    // Produces tap if held longer than tapping-term-ms
    tapping-term-ms = <280>;
    // A quick tap+hold holds tap key pressed.
    quick-tap-ms = <QUICK_TAP_MS>;
    // Consider activating hold behavior only if key was pressed in more
    // than this amound of time after previous.
    require-prior-idle-ms = <120>;
    bindings = <&mo>, <&kp>;
    hold-trigger-key-positions = <LB1 LB2 LB3 LB4 KEYS_R THUMBS>;
)

// layer-tap
ZMK_HOLD_TAP(mylt,
    flavor = "hold-preferred";
    tapping-term-ms = <170>;
    quick-tap-ms = <175>;
    bindings = <&mo>, <&kp>;
)

// tap: sticky-shift | shift + tap/ double-tap: caps-word | hold: shift
ZMK_MOD_MORPH(smart_shft,
    bindings = <&sk LSHFT>, <&caps_word>;
    mods = <(MOD_LSFT)>;
)
// &caps_word {  // mods deactivate caps-word, requires PR #1451
//     /delete-property/ ignore-modifiers;
// };

// hold: &kp | tap: &caps_word
ZMK_HOLD_TAP(cw_kp,
    flavor = "hold-preferred";
    tapping-term-ms = <170>;
    hold-while-undecided;
    bindings = <&kp>, <&caps_word>;
)

// hold: &mo | tap: &caps_word
ZMK_HOLD_TAP(mo_cw,
    flavor = "balanced";
    tapping-term-ms = <170>;
    bindings = <&mo>, <&caps_word>;
)
// hold: &mo | tap: sticky-key
ZMK_HOLD_TAP(mo_sk,
    flavor = "balanced";
    tapping-term-ms = <170>;
    bindings = <&mo>, <&sk>;
)

// layer-hold | layer-toggle
ZMK_HOLD_TAP(motog,
    flavor = "hold-preferred";
    tapping-term-ms = <170>;
    bindings = <&mo>, <&tog>;
)

ZMK_HOLD_TAP(mo_lang,
    flavor = "balanced";
    tapping-term-ms = <170>;
    bindings = <&mo>, <&lang>;
)

// sticky modifier: sticky key on press, normal key on hold
ZMK_HOLD_TAP(sticky_key_press_kp_hold,
    flavor = "hold-preferred";
    tapping-term-ms = <170>;
    hold-while-undecided-linger;
    bindings = <&kp>, <&sk>;
)

#define SK(key) &sticky_key_press_kp_hold key key

ZMK_HOLD_TAP(nbsp_mod,
    flavor = "hold-preferred";
    tapping-term-ms = <170>;
    quick-tap-ms = <175>;
    bindings = <&kp>, <&nbsp>;
)


//-- Layers --------------------------------------------------------------------

//  t: tap, h: hold
// ╭─────────┬─────────┬─────────┬─────────┬──────────┬──────────╮                              ╭─────────┬──────────┬─────────┬─────────┬─────────┬─────────╮
// │    =    │    1    │    2    │    3    │    4     │    5     │                              │    6    │    7     │    8    │    9    │    0    │    -    │
// ├─────────┼─────────┼─────────┼─────────┼──────────┼──────────┤                              ├─────────┼──────────┼─────────┼─────────┼─────────┼─────────┤
// │   TAB   │    Q    │    W    │    E    │    R     │    T     │                              │    Y    │    U     │    I    │    O    │    P    │   ` ~   │
// ├─────────┼─────────┼─────────┼─────────┼──────────┼──────────┤                              ├─────────┼──────────┼─────────┼─────────┼─────────┼─────────┤
// │  LANG   │    A    │    S    │    D    │    F     │    G     │                              │    H    │    J     │    K    │    L    │   ; :   │   ' "   │
// ├─────────┼─────────┼─────────┼─────────┼──────────┼──────────┤                              ├─────────┼──────────┼─────────┼─────────┼─────────┼─────────┤
// │ Shift ( │    Z    │    X    │    C    │    V     │    B     │     >││             mute     │    N    │    M     │   , <   │   . >   │   / ?   │ Shift ) │
// ╰─────────┴─────────┴─────────┴─────────┴──────────┴──────────╯                              ╰─────────┴──────────┴─────────┴─────────┴─────────┴─────────╯
//                     ╭─────────┬─────────┬──────────┬──────────┬─────────────╮  ╭─────────────┬─────────┬──────────┬─────────┬─────────╮
//                     │         │   Win   │ t: Esc   │ t: Space │ t: Enter    │  │ t: Sk-Shift │ t: Bscp │ t: Del   │  LANG   │         │
//                     │ h: FUNC │         │ h: Alt   │ h: Ctrl  │ h: NUM      │  │ h: Shift    │ h: SYM  │ h: Alt   │         │         │
//                     ╰─────────┴─────────┴──────────┴──────────┴─────────────╯  ╰─────────────┴─────────┴──────────┴─────────┴─────────╯
ZMK_LAYER(qwerty,
//╭────────────────┬──────────┬──────────┬──────────┬──────────────┬─────────────────╮                                 ╭────────────────┬──────────────┬───────────┬─────────┬──────────┬────────────────╮
    &kp EQUAL        &kp N1     &kp N2     &kp N3     &kp N4         &kp N5                                              &kp N6           &kp N7         &kp N8      &kp N9    &kp N0     &kp MINUS
//├────────────────┼──────────┼──────────┼──────────┼──────────────┼─────────────────┤                                 ├────────────────┼──────────────┼───────────┼─────────┼──────────┼────────────────┤
    &kp TAB          &kp Q      &kp W      &kp E      &kp R          &kp T                                               &kp Y            &kp U          &kp I       &kp O     &kp P      &kp GRAVE
//├────────────────┼──────────┼──────────┼──────────┼──────────────┼─────────────────┤                                 ├────────────────┼──────────────┼───────────┼─────────┼──────────┼────────────────┤
    &lang            &kp A      &kp S      &kp D      &kp F          &kp G                                               &kp H            &kp J          &kp K       &kp L     &kp SEMI   &kp SQT
//├────────────────┼──────────┼──────────┼──────────┼──────────────┼─────────────────┤                                 ├────────────────┼──────────────┼───────────┼─────────┼──────────┼────────────────┤
    &mt LSHFT LPAR   &kp Z      &kp X      &kp C      &kp V          &kp B             &kp C_PLAY_PAUSE    &kp C_MUTE    &kp N            &kp M          &kp COMMA   &kp DOT   &kp FSLH   &mt RSHFT RPAR
//╰────────────────┴──────────┴──────────┴──────────┴──────────────┴─────────────────╯                                 ╰────────────────┴──────────────┴───────────┴─────────┴──────────┴────────────────╯
//                            ╭──────────┬──────────┬──────────────┬─────────────────┬─────────────────╮ ╭─────────────┬────────────────┬──────────────┬───────────┬─────────╮
                                &mo FUNC   &kp LGUI   &mt LALT ESC   &mt LCTRL SPACE   &mylt NUM ENTER     &smart_shft   &mylt SYM BSPC   &mt LALT DEL   &lang       XXX
//                            ╰──────────┴──────────┴──────────────┴─────────────────┴─────────────────╯ ╰─────────────┴────────────────┴──────────────┴───────────┴─────────╯
    , /* sensor */ &inc_dec_kp LEFT RIGHT &inc_dec_kp C_VOLUME_DOWN C_VOLUME_UP
)

//╭───────┬───────┬───────┬───────┬───────┬───────╮                  ╭───────┬───────┬───────┬───────┬───────┬───────╮
//│  F12  │  F1   │  F2   │  F3   │  F4   │  F5   │                  │  F6   │  F7   │  F8   │  F9   │  F10  │  F11  │
//├───────┼───────┼───────┼───────┼───────┼───────┤                  ├───────┼───────┼───────┼───────┼───────┼───────┤
//│       │       │   @   │   {   │   }   │   #   │                  │       │   ^   │   $   │       │       │   ~   │
//├───────┼───────┼───────┼───────┼───────┼───────┤                  ├───────┼───────┼───────┼───────┼───────┼───────┤
//│       │   !   │   +   │   =   │   -   │   *   │                  │   ←   │   ↓   │   ↑   │   →   │   :   │   "   │
//├───────┼───────┼───────┼───────┼───────┼───────┤                  ├───────┼───────┼───────┼───────┼───────┼───────┤
//│       │   \   │       │   [   │   ]   │   &   │                  │   |   │   %   │   <   │   >   │   ?   │       │
//╰───────┴───────┴───────┴───────┴───────┴───────╯                  ╰───────┴───────┴───────┴───────┴───────┴───────╯
//                ╭───────┬───────┬───────┬───────┬───────╮  ╭───────┬───────┬───────┬───────┬───────╮
//                │       │Compose│   _   │ Space │ NbSpc │  │       │ HOLD  │       │       │       │
//                ╰───────┴───────┴───────┴───────┴───────╯  ╰───────┴───────┴───────┴───────┴───────╯
ZMK_LAYER(symbols,
//╭─────────┬────────────────┬────────────────┬──────────────────┬─────────────────┬─────────────────╮                      ╭───────────┬────────────────────┬─────────────────────┬──────────────────┬─────────────────┬───────────╮
    &kp F12   &kp F1           &kp F2           &kp F3             &kp F4            &kp F5                                   &kp F6      &kp F7               &kp F8                &kp F9             &kp F10           &kp F11
//├─────────┼────────────────┼────────────────┼──────────────────┼─────────────────┼─────────────────┤                      ├───────────┼────────────────────┼─────────────────────┼──────────────────┼─────────────────┼───────────┤
    XXX       XXX              &kp AT           &kp LBRC           &kp RBRC          &kp HASH                                 XXX         &kp CARET            &kp DOLLAR            XXX                XXX               &kp TILDE
//├─────────┼────────────────┼────────────────┼──────────────────┼─────────────────┼─────────────────┤                      ├───────────┼────────────────────┼─────────────────────┼──────────────────┼─────────────────┼───────────┤
    XXX       &kp EXCL         &kp PLUS         &kp EQUAL          &kp MINUS         &kp ASTRK                                &kp LEFT    &kp DOWN             &kp UP                &kp RIGHT          &kp COLON         &kp DQT
//├─────────┼────────────────┼────────────────┼──────────────────┼─────────────────┼─────────────────┤                      ├───────────┼────────────────────┼─────────────────────┼──────────────────┼─────────────────┼───────────┤
    ___       &hml LGUI BSLH   &hml LALT PLUS   &hml LSHIFT LBKT   &hml LCTRL RBKT   &kp AMPS           ___            ___    &kp PIPE    &hmr LCTRL PERCENT   &hmr RSHIFT LT        &hmr LALT GT       &hmr LGUI QMARK   XXX
//╰─────────┴────────────────┴────────────────┴──────────────────┴─────────────────┴─────────────────╯                      ╰───────────┴────────────────────┴─────────────────────┴──────────────────┴─────────────────┴───────────╯
//                           ╭────────────────┬──────────────────┬─────────────────┬─────────────────┬───────────╮  ╭───────┬───────────┬────────────────────┬─────────────────────┬──────────────────╮
                               XXX              &kp RALT           &mt LALT UNDER    &mt LCTRL SPACE    &nbsp          ___    ___         ___                  ___                   ___
//                           ╰────────────────┴──────────────────┴─────────────────┴─────────────────┴───────────╯  ╰───────┴───────────┴────────────────────┴─────────────────────┴──────────────────╯
)

ZMK_LAYER(num,
//╭─────────┬───────┬───────┬───────┬───────┬───────╮                ╭─────┬─────┬─────┬─────┬─────┬─────╮
//│         │       │       │       │       │       │                │     │     │     │     │     │     │
//├─────────┼───────┼───────┼───────┼───────┼───────┤                ├─────┼─────┼─────┼─────┼─────┼─────┤
//│         │       │       │       │       │       │                │  7  │  8  │  9  │     │  *  │     │
//├─────────┼───────┼───────┼───────┼───────┼───────┤                ├─────┼─────┼─────┼─────┼─────┼─────┤
//│         │  Win  │  Alt  │ Shift │ Ctrl  │       │                │  4  │  5  │  6  │     │  +  │     │
//├─────────┼───────┼───────┼───────┼───────┼───────┤                ├─────┼─────┼─────┼─────┼─────┼─────┤
//│         │       │       │       │       │       │                │  1  │  2  │  3  │  .  │  -  │     │
//╰─────────┴───────┴───────┴───────┴───────┴───────╯                ╰─────┴─────┴─────┴─────┴─────┴─────╯
//                  ╭───────┬───────┬───────┬───────┬───────╮  ╭─────┬─────┬─────┬─────┬─────╮
//                  │       │       │ HOLD  │       │       │  │  0  │     │     │     │     │
//                  ╰───────┴───────┴───────┴───────┴───────╯  ╰─────┴─────┴─────┴─────┴─────╯
//╭──────────┬──────────┬──────────┬───────────┬────────────┬───────────╮                    ╭───────────┬───────────┬───────────┬─────────┬────────┬────────╮
    XXX        XXX        XXX        XXX         XXX          XXX                              XXX         XXX         XXX         XXX       XXX      XXX
//├──────────┼──────────┼──────────┼───────────┼────────────┼───────────┤                    ├───────────┼───────────┼───────────┼─────────┼────────┼────────┤
    XXX        XXX        XXX        XXX         XXX          XXX                              &kp KP_N7   &kp KP_N8   &kp KP_N9   XXX       XXX      XXX
//├──────────┼──────────┼──────────┼───────────┼────────────┼───────────┤                    ├───────────┼───────────┼───────────┼─────────┼────────┼────────┤
    &tog NUM   XXX        XXX        XXX         XXX          XXX                              &kp KP_N4   &kp KP_N5   &kp KP_N6   XXX       XXX      XXX
//├──────────┼──────────┼──────────┼───────────┼────────────┼───────────┤                    ├───────────┼───────────┼───────────┼─────────┼────────┼────────┤
    XXX        &sk LGUI   &sk LALT   &sk LSHFT   &sk LCTRL    XXX         ___       ___        &kp KP_N1   &kp KP_N2   &kp KP_N3   &kp DOT   XXX      XXX
//╰──────────┴──────────┴──────────┴───────────┴────────────┴───────────╯                    ╰───────────┴───────────┴───────────┴─────────┴────────┴────────╯
//                      ╭──────────┬───────────┬────────────┬───────────┬─────╮  ╭───────────┬───────────┬───────────┬───────────┬─────────╮
                     &kp KP_NUMLOCK  ___         &to QWERTY   ___         ___      &kp KP_N0   ___         ___         ___         ___
//                      ╰──────────┴───────────┴────────────┴───────────┴─────╯  ╰───────────┴───────────┴───────────┴───────────┴─────────╯
)

ZMK_LAYER(func,
//╭──────────┬─────┬─────┬───────┬──────┬─────╮                  ╭─────┬─────┬─────┬─────┬─────┬─────╮
//│ Clear BT │ BT1 │ BT2 │  BT3  │ BT4  │ BT5 │                  │     │     │     │     │     │     │
//├──────────┼─────┼─────┼───────┼──────┼─────┤                  ├─────┼─────┼─────┼─────┼─────┼─────┤
//│          │     │     │       │      │     │                  │ F7  │ F8  │ F9  │ F12 │     │     │
//├──────────┼─────┼─────┼───────┼──────┼─────┤                  ┼─────┼─────┼─────┼─────┼─────┼─────┤
//│          │ Win │ Alt │ Shift │ Ctrl │     │                  │ F4  │ F5  │ F6  │ F11 │     │     │
//├──────────┼─────┼─────┼───────┼──────┼─────┤                  ┼─────┼─────┼─────┼─────┼─────┼─────┤
//│   HOLD   │     │     │       │      │     │                  │ F1  │ F2  │ F3  │ F10 │     │     │
//╰──────────┴─────┴─────┴───────┴──────┴─────╯                  ╰─────┴─────┴─────┴─────┴─────┴─────╯
//                 ╭─────┬───────┬──────┬─────┬───────╮  ╭───────┬─────┬──────┬─────┬─────╮
//                 │     │       │      │     │       │  │       │     │      │     │     │
//                 ╰─────┴───────┴──────┴─────┴───────╯  ╰───────┴─────┴──────┴─────┴─────╯
//╭────────────┬──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮              ╭─────────┬────────┬────────┬─────────┬─────┬─────╮
    &bt BT_CLR   &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4                  XXX       XXX      XXX      XXX       XXX   XXX
//├────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤              ├─────────┼────────┼────────┼─────────┼─────┼─────┤
    XXX          XXX            XXX            XXX            XXX            XXX                           &kp F7    &kp F8   &kp F9   &kp F12   XXX   XXX
//├────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤              ├─────────┼────────┼────────┼─────────┼─────┼─────┤
    XXX          &sk LGUI       &sk LALT       &sk LSHFT      &sk LCTRL      XXX                           &kp F4    &kp F5   &kp F6   &kp F11   XXX   XXX
//├────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤              ├─────────┼────────┼────────┼─────────┼─────┼─────┤
    XXX          XXX            XXX            XXX            XXX            XXX            ___      ___   &kp F1    &kp F2   &kp F3   &kp F10   XXX   XXX
//╰────────────┴──────────────┴──────────────┴──────────────┴──────────────┴──────────────╯              ╰─────────┴────────┴────────┴─────────┴─────┴─────╯
//                            ╭──────────────┬──────────────┬──────────────┬──────────────┬─────╮  ╭─────┬─────────┬────────┬────────┬─────────╮
                                ___            ___            ___            ___            ___      ___   ___       ___      ___      ___
//                            ╰──────────────┴──────────────┴──────────────┴──────────────┴─────╯  ╰─────┴─────────┴────────┴────────┴─────────╯
)


// //                          KEY POSITIONS
// // ╭─────────────────────────╮          ╭─────────────────────────╮
// // │ LN5 LN4 LN3 LN2 LN1 LN0 │          │ RN0 RN1 RN2 RN3 RN4 RN5 │
// // │ LT5 LT4 LT3 LT2 LT1 LT0 │          │ RT0 RT1 RT2 RT3 RT4 RT5 │
// // │ LM5 LM4 LM3 LM2 LM1 LM0 │ LEC  REC │ RM0 RM1 RM2 RM3 RM4 RM5 │
// // │ LB5 LB4 LB3 LB2 LB1 LB0 ╰───╮  ╭───╯ RB0 RB1 RB2 RB3 RB4 RB4 │
// // ╰───────╮ LH4 LH3 LH2 LH1 LH0 │  │ RH0 RH1 RH2 RH3 RH4 ╭───────╯
// //         ╰─────────────────────╯  ╰─────────────────────╯
//
// #define FN_COMBO(name, combo_bindings, keypos) \
//     / { \
//         combos { \
//             compatible = "zmk,combos"; \
//             name ## _combo { \
//                 timeout-ms = <500>; \
//                 bindings = <combo_bindings>; \
//                 key-positions = <keypos>; \
//                 layers = <FUNC>; \
//             }; \
//         }; \
//     };
//
// FN_COMBO(f11, &kp F11,  LM4 LM2 LM1)
// FN_COMBO(f12, &kp F12,  LM4 LM3)
// FN_COMBO(f10, &kp F10,  LM4 LM2)
// FN_COMBO(f9,  &kp F9,   LM4 LM1)
//
// FN_COMBO(f3,  &kp F3,   LM2 LM1)
//
// FN_COMBO(f7,  &kp F7,   LM3 LM2 LM1)
// FN_COMBO(f6,  &kp F6,   LM3 LM2)
// FN_COMBO(f5,  &kp F5,   LM3 LM1)
//
// ZMK_LAYER(func,
// //╭─────┬─────┬─────┬─────┬─────┬─────╮                  ╭─────┬──────┬─────┬─────┬─────┬──────╮
// //│     │     │     │     │     │     │                  │     │      │     │     │     │      │
// //├─────┼─────┼─────┼─────┼─────┼─────┤                  ├─────┼──────┼─────┼─────┼─────┼──────┤
// //│     │     │     │     │     │     │                  │     │      │     │     │     │      │
// //├─────┼─────┼─────┼─────┼─────┼─────┤                  ├─────┼──────┼─────┼─────┼─────┼──────┤
// //│     │ F8  │ F4  │ F2  │ F1  │     │                  │     │      │     │     │     │      │
// //├─────┼─────┼─────┼─────┼─────┼─────┤                  ├─────┼──────┼─────┼─────┼─────┼──────┤
// //│     │     │     │     │     │     │                  │     │      │     │     │     │      │
// //╰─────┴─────┴─────┴─────┴─────┴─────╯                  ╰─────┴──────┴─────┴─────┴─────┴──────╯
// //            ╭─────┬─────┬─────┬─────┬───────╮  ╭───────┬─────┬──────┬─────┬─────╮
// //            │     │     │     │     │       │  │       │     │ HOLD │     │     │
// //            ╰─────┴─────┴─────┴─────┴───────╯  ╰───────┴─────┴──────┴─────┴─────╯
// //╭─────┬────────┬────────┬────────┬────────┬─────╮              ╭─────┬─────┬─────┬─────┬─────┬─────╮
//     XXX   XXX      XXX      XXX      XXX      XXX                  XXX   XXX   XXX   XXX   XXX   XXX
// //├─────┼────────┼────────┼────────┼────────┼─────┤              ├─────┼─────┼─────┼─────┼─────┼─────┤
//     XXX   XXX      XXX      XXX      XXX      XXX                  XXX   XXX   XXX   XXX   XXX   XXX
// //├─────┼────────┼────────┼────────┼────────┼─────┤              ├─────┼─────┼─────┼─────┼─────┼─────┤
//     XXX   &kp F8   &kp F4   &kp F2   &kp F1   XXX                  XXX   XXX   XXX   XXX   XXX   XXX
// //├─────┼────────┼────────┼────────┼────────┼─────┤              ├─────┼─────┼─────┼─────┼─────┼─────┤
//     XXX   XXX      XXX      XXX      XXX      XXX   ___      ___   XXX   XXX   XXX   XXX   XXX   XXX
// //╰─────┴────────┴────────┴────────┴────────┴─────╯              ╰─────┴─────┴─────┴─────┴─────┴─────╯
// //               ╭────────┬────────┬────────┬─────┬─────╮  ╭─────┬─────┬─────┬─────┬─────╮
//                    XXX      XXX      XXX      XXX   XXX      XXX   XXX   ___   XXX   XXX
// //               ╰────────┴────────┴────────┴─────┴─────╯  ╰─────┴─────┴─────┴─────┴─────╯
// )
